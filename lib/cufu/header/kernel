function cufu/header/cudaError_enum() {
  local _h="${1:-${cufu_cuda_home}/include/cuda.h}"
  local _o="${2:-cudaerror.h}"

  if ! test -r "${_h}" ; then
    echo "Not found: ${_h}"
    return 1
  fi

  echo "! Generated from: ${_h}" > "${_o}"

  local _e=$(ns/func ${FUNCNAME})
  cat "${_h}" | \
  awk -v e="${_e}" 'BEGIN{
    start=0;
    m=sprintf("typedef enum %s",e);
  }
  {
    if(start&&match($0,"} CUresult;"))
      start=0;
    if(match($0,m))
      start=1;
    if(start&&match($0,"^ *CUDA_")) {
      split($0,a,"=");
      split(a[2],b,",")
      print "#define" a[1] b[1];
    }
  }' >> "${_o}"
}

function cufu/header/cudaDeviceProp() {
  local _h="${1:-${cufu_cuda_home}/include/driver_types.h}"
  local _o="${2:-cudadevice.h}"
  local _ik=4

  if ! test -r "${_h}" ; then
    echo "Not found: ${_h}"
    return 1
  fi

  echo "! Generated from: ${_h}"  > "${_o}"
  local _e=$(ns/func ${FUNCNAME})

  echo "type ${_e}"              >> "${_o}"
  cat "${_h}" | \
  awk -v e="${_e}" -v ik="${_ik}" 'BEGIN{
    start=0;
    m=sprintf("struct.*%s",e);
  }
  {
    if(start&&match($0,"\}\;"))
      start=0;
    if(match($0,m))
      start=1;
    if(start&&match($0,"/**")) {
      split($0,a,";");
      split(a[1],b);
      if(b[1] == "int") {
        l=sprintf("integer(kind=KIND_INT)", ik);
        l=sprintf("%-32s :: %s", l, b[2]);
      }
      if(b[1] == "size_t") {
        l=sprintf("integer(kind=KIND_INT_PTR)");
        l=sprintf("%-32s :: %s", l, b[2]);
      }
      if(b[1] == "char") {
        l="character";
        split(b[2],c,"\\[");
        if( c[2] != "" ) {
          sub("\\]","",c[2]);
          l=sprintf("%s*%d",l,c[2]);
        }
        l=sprintf("%-32s :: %s",l,c[1]);
      }
      sub("\\[","\(",l);
      sub("\\]","\)",l);
      print "  " l;
    }
  }' >> "${_o}"
  echo "end type ${_e}" >> "${_o}"
}
